
<!-- Modal -->
<div class="chat-popup" id="chatForm">
    <!-- Modal content-->
    <div class="modal-content" method="post">
        <div class="modal-header ei-chatbox-header">
            <button type="button" id="close" onclick="closeChat()" class="close">&times;</button>
            <button type="button" id="minimize" class="close" data-toggle="collapse" data-target="#chatbody">&minus;</button>
            @if (User.IsInRole("Admin"))
            {
                @Html.ActionLink("MANAGE", "Index", "ChatMessages", null, new { @class = "manageChat" })
            }
            <h4 class="chatName">@User.Identity.Name</h4>
        </div>
        <form>
            <!-- Wrapper for body content (without any padding) allows smooth animation -->
            <div id="chatbody" class="collapse">
                <div class="modal-body ei-chatbox-body">
                    <ul id="discussion"></ul>
                    <textarea placeholder="Type message..." name="msg" id="messageBox" required></textarea>
                    <input type="hidden" id="displayname" value="@User.Identity.Name" />
                    <button type="button" class="btn ei-message-btn" id="sendmessage">Send</button>
                </div>
            </div>
        </form>
    </div>
</div>

<script src="~/Scripts/jquery.signalR-2.4.1.min.js"></script>
<!--Reference the autogenerated SignalR hub script.-->
<script src="~/signalr/hubs"></script>
<!--Script to keep chat message state-->
<script language="javascript" type="text/javascript">
    // JQuery for creating a ChatBox connection 
    // Creates a connection to the chathub server, attaches some Javascript methods to it, and does some light setup.
    $(function () {
        const EnterKeyCode = 13;

        // Reference the auto-generated proxy for the hub.
        let chat = $.connection.chatHub;

        // Function to clear a client's chat dialog of all messages
        chat.client.refreshChat = function () {
            $("#discussion > li").remove();
        };

        // Function to scroll the chatbox's view to the bottom of the message list.
        chat.client.scrollToBottom = function () {
            let element = document.getElementById("discussion");
            element.scrollTop = element.scrollHeight - element.clientHeight;
        }

        // Function returns true if the chatbox's view is currently at the bottom of the chat window (viewing the newest chats).
        chat.client.viewingNewestChats = function () {
            let element = document.getElementById("discussion");
            let value = element.scrollHeight - element.scrollTop - element.clientHeight;
            return Math.floor(value) === 0;  // floor() is important because Chrome has some weirdness with element.scrollTop
        }

        // Function to append one new message to the bottom of the chat box's message list.
        chat.client.addNewMessageToPage = function (time, name, message) {
            let trackNewChats = chat.client.viewingNewestChats();

            // Targets the unordered list of chats and appends a new one.
            $('#discussion').append('<li><strong>' + htmlEncode(name)       // htmlEncode() prevents script-injection attacks
                + '</strong>&nbsp;&nbsp;' + htmlEncode(time) + "</li><li>" + htmlEncode(message) + '</li>');

            // If the user is viewing the most recent chats, keep it that way.
            if (trackNewChats) {
                chat.client.scrollToBottom();
            }
        };

        // When the 'Send' button is clicked: submit new chat and clear the text input box.
        $('#sendmessage').click(function () {
            // Get the user's message and clear the input box.
            let name = $('#displayname').val();
            let message = $('#messageBox').val();
            $('#messageBox').val('');

            // If the submitted chat message is only whitespace, discard it - quit this function early.
            if (message.trim() === "")
                return;

            // Ask the chathub server to submit the message and refresh the view.
            chat.server.send(name, message);

            // Focus the text box; let the user immediately start typing a new message.
            $('#messageBox').focus();
        });

        // When Enter is pressed inside the chatbox's textbox, 'click' the 'Send' button.
        $('#messageBox').keypress(function (event) {
            if (event.which == EnterKeyCode && !event.shiftKey) {
                $('#sendmessage').click();
                event.preventDefault();     // Prevents the enter key from typing a character.
            }
        });

        // Start the connection. This is where anything that needs to happen on initialization goes.
        // Leave this at the bottom of this function; chat.server.getMessages() depends on the Javascript functions defined above.
        // Unless leaving it at the bottom isn't important.
        $.connection.hub.start().done(function () {
            // Get all discussion messages.
            chat.server.getMessages();
        });
    });
    $(document).ready(function(){
        keepChatState("chatbody", "close")
    });
</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-cookie/1.4.1/jquery.cookie.js"></script>


