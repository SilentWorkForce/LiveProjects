@model ConstructionNew.Models.RegisterViewModel
@{
    ViewBag.Title = "Register";
}

<h2>@ViewBag.Title</h2>

@using (Html.BeginForm("Register", "Account", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{
    @Html.AntiForgeryToken()
    <h4>Create a new account</h4>
    <hr />
    @Html.HiddenFor(m => m.UserRoles)
    @Html.ValidationSummary("", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(m => m.UserName, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBox("UserNameDisplay", @Model.UserName, new { @class = "form-control", @disabled = "disabled" })
            @Html.TextBoxFor(m => m.UserName, new { @class = "form-control", @type = "hidden", Value = @Model.UserName })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.FName, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.FName, new { @class = "form-control" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.LName, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.LName, new { @class = "form-control" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.PhoneNumber, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.PhoneNumber, new { @class = "form-control", @id = "phone", @maxlength = "16" })
        </div>
        @Html.ValidationMessageFor(m => m.PhoneNumber)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Email, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.Email, new { @class = "form-control" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Password, new { @class = "col-md-2 control-label"})
        <div class="col-md-10">
            @Html.PasswordFor(m => m.Password, new { @class = "form-control", @id = "passwordInput"})
        </div>
    </div>
    
    <div class="form-group">
        @Html.LabelFor(m => m.ConfirmPassword, new { @class = "col-md-2 control-label"})
        <div class="col-md-10">
            @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control"})
        </div>
    </div>
    <div class="form-group">
        <div id="pswd_info">
            <ul>
                <lh>Password must meet the following requirements:</lh>

                <li id="letter" class="invalid">At least <strong>one letter</strong></li>
                <li id="capital" class="invalid">At least <strong>one capital letter</strong></li>
                <li id="number" class="invalid">At least <strong>one number</strong></li>
                <li id="length" class="invalid">Be at least <strong>8 characters</strong></li>
                <li id="specialCharacter" class="invalid">Have at least 1 <strong>special character</strong></li>
            </ul>
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" class="btn btn-default" value="Register" />
        </div>
    </div>
    <div id="myModal1" class="modal fade" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header text-center" style="background-color: lightgray">
                        
                        <h4 class="modal-title">Welcome @Model.UserName</h4>
                    </div>
                    <div class="modal-body text-center">
                        Login in and get to know the Company...
                    </div>
                </div><!-- /.modal-content -->
            </div><!-- /.modal-dialog -->
        </div><!-- /.modal -->

}

        @section Scripts {
            @Scripts.Render("~/bundles/jqueryval")
            <script>
                $('#phone').keyup(function (e) {
                    var ph = this.value.replace(/\D/g, '').substring(0, 10);
                    // Backspace and Delete keys
                    var deleteKey = (e.keyCode == 8 || e.keyCode == 46);
                    var len = ph.length;
                    if (len == 0) {
                        ph = ph;
                    } else if (len < 3) {
                        ph = '(' + ph;
                    } else if (len == 3) {
                        ph = '(' + ph + (deleteKey ? '' : ') ');
                    } else if (len < 6) {
                        ph = '(' + ph.substring(0, 3) + ') ' + ph.substring(3, 6);
                    } else if (len == 6) {
                        ph = '(' + ph.substring(0, 3) + ') ' + ph.substring(3, 6) + (deleteKey ? '' : '-');
                    } else {
                        ph = '(' + ph.substring(0, 3) + ') ' + ph.substring(3, 6) + '-' + ph.substring(6, 10);
                    }
                    this.value = ph;
                });
            </script>
        }
